<?php

/**
 * @file
 * Implementing our hooks.
 */

/**
 * Implements hook_theme().
 *
 * @param [type] $existing
 * @param [type] $type
 * @param [type] $theme
 * @param [type] $path
 * @return void
 */
function module_hero_theme($existing, $type, $theme, $path){
  return [
    'hero_list' => [
      'variables' => ['items' => [], 'title' => ''],
    ]
  ];
}

/**
 * Implement hook_form_alter().
 *
 * @param [type] $form
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 * @param [type] $form_id
 * @return void
 */
function module_hero_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Get form_id using below approach
  // kint($form_id);die();
  if ($form_id == "node_article_form" || $form_id == "node_article_edit_form") {

    // Check form elements using this approach
    // kint($form);die();

    // Do not display the 'Tags' field on the node form.
    $form['field_tags']['#access'] = FALSE;

    // Change form element widget
    $form['title']['widget'][0]['value']['#title'] = t('Article Title');

    // Custom validation
    $form['#validate'][] = '_module_hero_article_validate';
  }
}

/**
 * Custom valdiation function
 */
function _module_hero_article_validate(&$form, $form_state) {
  if (is_numeric($form_state->getValue('title')[0]['value'])) {
    $form_state->setErrorByName('title', t('Please do not use numeric characters for title.'));
  }
}

/**
 * Implements hook_entity_presave().
 */
function module_hero_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  // if ($entity instanceof ContentEntityInterface && $entity
  //   ->isTranslatable()) {
  //   $route_match = \Drupal::routeMatch();
  //   \Drupal::service('content_translation.synchronizer')
  //     ->synchronizeFields($entity, $entity
  //     ->language()
  //     ->getId(), $route_match
  //     ->getParameter('source_langcode'));
  // }

  if ($entity->bundle() == 'article') {
    # code...
    \Drupal::messenger()->addStatus('Called after presave!');
    \Drupal::messenger()->addStatus('Resaving our article with title: "'. $entity->get('title')->getValue()[0]['value'].'"');
  }

}
